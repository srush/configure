
(require 'package)
(add-to-list 'package-archives
  '("melpa" . "http://melpa.milkbox.net/packages/") t)

(setq package-enable-at-startup nil)
(package-initialize)

(require 'uniquify)
(setq uniquify-buffer-name-style 'reverse)
;; This is a SAMPLE .emacs file
;; Feel free to use this as a base for customizing emacs
(server-start)

;;(load "~/.emacs.d/haskell-mode-2.4/haskell-site-file")
;;(load "~/.emacs.d/ido.el")
;;(load "~/.emacs.d/notifications.el")
;;(load "~/.emacs.d/pomodoro.el/pomodoro.el")


(load "~/.emacs.d/edit-server.el")
(load "~/.emacs.d/coffee-mode.el")

(load "~/.emacs.d/go-mode-load.el")
(load "~/.emacs.d/go-mode.el")
(load "~/.emacs.d/google-c-style.el")
(require 'go-mode-load)

;;(load "~/.emacs.d/ipython.el")
;;(require 'ipython)
(setq-default py-indent-offset 4)
(menu-bar-mode 0)


(setq-default indent-tabs-mode nil)

;; Switch to visible bell instead of audio bell
(setq-default visible-bell t)
(setq-default bell-inhibit-time 10)

(show-paren-mode t)
(setq show-paren-style 'mixed)

(tool-bar-mode 0)
(menu-bar-mode 0)
(setq-default case-fold-search t)
(global-set-key "\M-g"  'goto-line)
(global-set-key "\M-c"  'compile)
(global-set-key "\M-\\"  'term-line-mode)


(add-hook 'term-mode-hook
(lambda ()
(define-key term-raw-map "\C-j" 'term-send-raw)
(define-key term-raw-map "\C-d" 'term-send-raw)
(define-key term-raw-map "\C-k" 'term-send-raw)
(define-key term-raw-map "\C-l" 'term-send-raw)
(define-key term-raw-map "\C-f" 'term-send-raw)
(define-key term-raw-map "\C-h" 'term-send-raw)
 ) )


;; Set ctrl-arrow keys to move words/pages
(global-set-key "\M-[C" 'forward-word)
(global-set-key "\M-[D" 'backward-word)
(global-set-key "\M-[B" 'scroll-up)
(global-set-key "\M-[A" 'scroll-down)

(global-set-key "\M-[5C" 'forward-word)
(global-set-key "\M-[5D" 'backward-word)
(transient-mark-mode 1)
;; Lisp mode for anything that ends in .emacs
(setq auto-mode-alist (append '(("\\.emacs$" . lisp-mode))
                              auto-mode-alist))



;; set up css mode
;;(autoload 'css-mode "css-mode" "Major mode for editing css" t)
(setq auto-mode-alist
      (cons '("\\.css\\'" . css-mode) auto-mode-alist))


(setq auto-mode-alist
      (cons '("\\.cs\\'" . java-mode) auto-mode-alist))

(setq auto-mode-alist
      (cons '("\\.dot\\'" . java-mode) auto-mode-alist))


(setq auto-mode-alist
      (cons '("\\.hs\\'" . haskell-mode) auto-mode-alist))


(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)

(require 'ido)
(ido-mode t)


;; (load-file "~/.emacs.d/pabbrev.el")
(load-file "~/.emacs.d/json.el")
(load-file "~/.emacs.d/fold.el")
(require 'pabbrev)



(add-hook 'php-mode-hook 'pabbrev-mode)
;; Substitute the desired version for <version>

;;(load-file "~/.emacs.d/hs-lint.el")
;;(require 'hs-lint)


;;(defun my-haskell-hook ()
  ;;Whenever we open a file in Haskell mode, also activate Scion

  ;;(local-set-key "\C-cl" 'hs-lint)
  ;;(scion-mode 1)
  ;; Whenever a file is saved, immediately type check it and
  ;; highlight errors/warnings in the source.
  ;;(scion-flycheck-on-save 1))



(add-hook 'haskell-mode-hook 'my-haskell-hook)

;; Use ido-mode completion (matches anywhere, not just beginning)
;;
;; WARNING: This causes some versions of Emacs to fail so badly
;; that Emacs needs to be restarted.


(setq scion-completing-read-function 'ido-completing-read)
(add-hook 'py-mode-hook 'pabbrev-mode)
;;(add-hook 'c-mode-hook 'pabbrev-mode)
(add-hook 'haskell-mode-hook 'pabbrev-mode)
;;(add-hook 'c++-mode-hook 'pabbrev-mode)
(add-hook 'javascript-mode-hook 'pabbrev-mode)





;;(require 'template)
;;(template-initialize)
;;(global-set-key "\M-t" 'template-expand-template)

(put 'downcase-region 'disabled nil)



(global-set-key "\M-t" 'add-commit-template)


;;  (load "folding" 'nomessage 'noerror)
;;  (folding-mode-add-find-file-hook)
;;
;;  (folding-add-to-marks-list 'haskell-mode  "--{"  "--}"  nil t)

(add-hook 'haskell-mode-hook 'fold-mode)

(global-set-key "\C-co" 'fold-show-all )
(global-set-key "\C-cu" 'fold-whole-buffer )
(global-set-key "\C-cy" 'fold-show )
(global-set-key "\C-ct" 'fold-region )

(set-buffer-file-coding-system 'unix)


(defun my-revert-buffer()
"revert buffer without asking for confirmation"
(interactive "")
(revert-buffer t t)
)
(global-set-key "\C-cr" 'revert-buffer )

(define-key global-map "\C-n" 'scroll-up)
(define-key global-map "\C-p" 'scroll-down)

(defun delete-word (arg)
  "Delete characters forward until encountering the end of a word.
With argument, do this that many times."
  (interactive "p")
  (delete-region (point) (progn (forward-word arg) (point))))

(defun backward-delete-word (arg)
  "Delete characters backward until encountering the end of a word.
With argument, do this that many times."
  (interactive "p")
  (delete-word (- arg)))

(define-key global-map "\M-h" 'backward-delete-word)
(define-key global-map "\M-l" 'delete-word)
(define-key global-map "\C-h" 'backward-delete-char)

(global-set-key "\C-k" 'previous-line)
(define-key global-map "\C-j" 'next-line)
(define-key global-map "\C-l" 'kill-line)

(define-key global-map "\C-f" 'forward-char)
(define-key global-map "\C-d" 'backward-char)
(global-set-key "\C-d" 'backward-char)
(define-key global-map "\M-d" 'backward-word)



;; Literate Haskell


;;            ;; Haskell [requires MMM]

(defvar my-keys-minor-mode-map (make-keymap) "my-keys-minor-mode keymap.")

(define-key my-keys-minor-mode-map (kbd "C-j") 'next-line)
(define-key my-keys-minor-mode-map (kbd "C-d") 'backward-char)

(define-minor-mode my-keys-minor-mode
  "A minor mode so that my key settings override annoying major modes."
  t " my-keys" 'my-keys-minor-mode-map)

(my-keys-minor-mode 1)


; return a backup file path of a give file path
; with full directory mirroring from a root dir
; non-existant dir will be created
;; (defun my-backup-file-name (fpath)
;;   "Return a new file path of a given file path.
;; If the new path's directories does not exist, create them."
;;   (let (backup-root bpath)
;;     (setq backup-root "~/.emacs.d/emacs-backup")
;;     (setq bpath (concat backup-root fpath "~"))
;;     (make-directory (file-name-directory bpath) bpath)
;;     bpath
;;   )
;; )
;; (setq make-backup-file-name-function 'my-backup-file-name)

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

(add-hook 'compilation-mode-hook 'next-error-follow-minor-mode)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(TeX-view-program-selection (quote (((output-dvi style-pstricks) "dvips and gv") (output-dvi "xdvi") (output-pdf "Evince") (output-html "xdg-open"))))
 '(c-basic-offset 4)
 '(coffee-tab-width 4)
 '(comint-move-point-for-output (quote all))
 '(compile-command "scons")
 '(custom-safe-themes (quote ("f641bdb1b534a06baa5e05ffdb5039fb265fde2764fbfd9a90b0d23b75f3936b" "b7b443a696b07c0a0a65fb4efb06ad66db710eeaeef8c7729e11cad05e051e59" default)))
 '(doxymacs-doxygen-dirs (quote (("^/home/srush/Projects/relax_decode/" "~/Projects/relax_decode/doc/scarab.xml" "file:///home/srush/Projects/relax_decode/doc/html/"))))
 '(edit-server-new-frame nil)
 '(ein:complete-on-dot t)
 '(ein:use-auto-complete t t)
 '(ein:use-auto-complete-superpack t)
 '(multi-term-scroll-to-bottom-on-output t)
 '(org-agenda-files nil t)
 '(python-indent 4)
 '(safe-local-variable-values (quote ((TeX-master . slides))))
 '(tab-width 4)
 '(tex-main-file "main"))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(whizzy-error-face ((((class color)) (:background "red"))))
 '(whizzy-slice-face ((((class color)) (:background "blue")))))

(setq auto-mode-alist
      (cons '("SConstruct" . python-mode) auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.pyx\\'" . python-mode) auto-mode-alist))
(setq auto-mode-alist
      (cons '("\\.pxd\\'" . python-mode) auto-mode-alist))

 (setq auto-mode-alist
      (cons '("SConscript" . python-mode) auto-mode-alist))

(load-file "~/.emacs.d/multi-term.el")
(require 'xcscope)
(global-set-key "\M-."  'cscope-find-this-symbol)
(global-set-key "\M-p"  'doxymacs-insert-function-comment)
(global-set-key "\M-?"  'doxymacs-lookup)

(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "google-chrome")


(autoload 'multi-term "multi-term" nil t)
(autoload 'multi-term-next "multi-term" nil t)

(setq multi-term-program "/usr/bin/fish")   ;; use bash
;; (setq multi-term-program "/bin/zsh") ;; or use zsh...

;; only needed if you use autopair



(define-prefix-command 'screeny-map)
(global-set-key (kbd "C-a") 'screeny-map)

(define-key screeny-map (kbd "k") 'multi-term-next)
(define-key screeny-map (kbd "j") 'multi-term-prev)
(define-key screeny-map (kbd "c") 'multi-term) ;; create a new one

(add-to-list 'term-unbind-key-list  "C-a" )
;; (add-to-list 'term-unbind-key-list  "C-j")
;; (add-to-list 'term-unbind-key-list  "C-k")
;; (add-to-list 'term-unbind-key-list  "C-l")
;; (add-to-list 'term-bind-key-alist '("C-j" . term-send-raw))
;; (add-to-list 'term-bind-key-alist '("C-k" . term-send-raw))
;; (add-to-list 'term-bind-key-alist '("C-l" . term-send-raw))


;;(load-file "~/.emacs.d/color-theme-blackboard.el")
(require 'color-theme)
(setq color-theme-is-global t)
(color-theme-initialize)
(color-theme-arjen)
(add-to-list 'custom-theme-load-path "~/.emacs.d/")
;;(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(add-hook 'python-mode-hook 'ansi-color-for-comint-mode-on)


(global-font-lock-mode 1)

(defalias 'yes-or-no-p 'y-or-n-p)
;;;;;;;;;;;;;;;;;;;;
;; set up unicode
(prefer-coding-system       'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
;; This from a japanese individual.  I hope it works.
(setq default-buffer-file-coding-system 'utf-8)
;; From Emacs wiki
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
;; MS Windows clipboard is UTF-16LE

;; Set to the location of your Org files on your local system
(setq org-directory "/home/srush/org")
(setq org-agenda-files (quote ("/home/srush/org/list.org")))

;; Set to the name of the file where new notes will be stored
(setq org-mobile-inbox-for-pull "/home/srush/org/MobileOrg/inbox.org")
;; Set to <your Dropbox root directory>/MobileOrg.
(setq org-mobile-directory "/home/srush/org/MobileOrg/")


(add-hook 'c-mode-common-hook
  (lambda()
    (local-set-key  (kbd "C-c o") 'ff-find-other-file)))

(add-hook 'java-mode-hook (lambda ()
                                (setq c-basic-offset 4)))

(add-hook 'c-mode-common-hook (lambda ()
                                (setq c-basic-offset 4)))


(setq ac-clang-flags
      (mapcar (lambda (item)(concat "-I" item))
              (split-string
               "
 /usr/include/c++/4.7
 /usr/include/x86_64-linux-gnu/c++/4.7/.
 /usr/include/c++/4.7/backward
 /usr/lib/gcc/x86_64-linux-gnu/4.7/include
 /usr/local/include
 /usr/lib/gcc/x86_64-linux-gnu/4.7/include-fixed
 /usr/include/x86_64-linux-gnu
 /usr/include
"
               )))


;; (add-to-list 'load-path "~/bin/emacs/auto-complete")
;; (require 'auto-complete-config)

;; (ac-config-default)
(autoload 'gtags-mode "gtags" "" t)
(add-hook 'c++-mode-hook
   '(lambda ()
      (gtags-mode t)
))
(global-set-key (kbd "M-]") 'gtags-find-symbol)
(global-set-key (kbd "M-.") 'gtags-find-rtag)
(require 'auto-complete-clang)

(require 'auto-complete-config)
(ac-config-default)

;; # (add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
;; # (add-to-list 'ac-dictionary-directories "~/ac-dict")
;; # (defun my-c-mode-common-hook()
;; #   (setq ac-auto-start t)
;; #   (setq ac-expand-on-auto-complete nil)
;; #   (setq ac-quick-help-delay 0.3)
;; #   (setq ac-ignore-case t)
;; #   (setq ac-auto-show-menu t)
;; #   ;;(define-key c-mode-base-map (kbd "M-/") 'ac-complete-clang)
;; #   (setq ac-sources (append '(ac-source-clang ac-source-yasnippet) ac-sources))
;; # )


;; # (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
;; # (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

;; (require 'auto-complete-clang)
;; (setq clang-completion-suppress-error 't)

;; (defun my-ac-clang-mode-common-hook()
;;   (define-key c-mode-base-map (kbd "M-/") 'ac-complete-clang)
;; )

;; (add-hook 'c-mode-common-hook 'my-ac-clang-mode-common-hook)

;; (require 'auto-complete-clang-async)

;; (defun ac-cc-mode-setup ()
;;   (setq ac-clang-complete-executable "~/.emacs.d/clang-complete")
;;   (setq ac-sources '(ac-source-clang-async))
;;   (ac-clang-launch-completion-process)
;; )

;; (defun my-ac-config ()
;;   (add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
;;   (add-hook 'auto-complete-mode-hook 'ac-common-setup)
;;   (global-auto-complete-mode t))

;; (my-ac-config)




(add-hook 'c-mode-common-hook 'google-set-c-style)
(add-hook 'c-mode-common-hook 'google-make-newline-indent)
(add-hook 'c-mode-common-hook (lambda () (add-to-list 'write-file-functions 'delete-trailing-whitespace)))

(defun ask-user-about-supersession-threat (fn)
  "blatantly ignore files that changed on disk"
  )



(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master "main")
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'tex-pdf-mode)
(add-hook 'LaTeX-mode-hook 'tex-source-correlate-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)




; SyncTeX basics

; un-urlify and urlify-escape-only should be improved to handle all special characters, not only spaces.
; The fix for spaces is based on the first comment on http://emacswiki.org/emacs/AUCTeX#toc20

(defun un-urlify (fname-or-url)
  "Transform file:///absolute/path from Gnome into /absolute/path with very limited support for special characters"
  (if (string= (substring fname-or-url 0 8) "file:///")
      (url-unhex-string (substring fname-or-url 7))
    fname-or-url))

(defun urlify-escape-only (path)
  "Handle special characters for urlify"
  (replace-regexp-in-string " " "%20" path))

(defun urlify (absolute-path)
  "Transform /absolute/path to file:///absolute/path for Gnome with very limited support for special characters"
  (if (string= (substring absolute-path 0 1) "/")
      (concat "file://" (urlify-escape-only absolute-path))
      absolute-path))



; SyncTeX backward search - based on http://emacswiki.org/emacs/AUCTeX#toc20, reproduced on http://tex.stackexchange.com/a/49840/21017

(defun th-evince-sync (file linecol &rest ignored)
  (let* ((fname (un-urlify file))
         (buf (find-file fname))
         (line (car linecol))
         (col (cadr linecol)))
    (if (null buf)
        (message "[Synctex]: Could not open %s" fname)
      (switch-to-buffer buf)
      (goto-line (car linecol))
      (unless (= col -1)
        (move-to-column col)))))

(defvar *dbus-evince-signal* nil)

(defun enable-evince-sync ()
  (require 'dbus)
  ; cl is required for setf, taken from: http://lists.gnu.org/archive/html/emacs-orgmode/2009-11/msg01049.html
  (require 'cl)
  (when (and
         (eq window-system 'x)
         (fboundp 'dbus-register-signal))
    (unless *dbus-evince-signal*
      (setf *dbus-evince-signal*
            (dbus-register-signal
             :session nil "/org/gnome/evince/Window/0"
             "org.gnome.evince.Window" "SyncSource"
             'th-evince-sync)))))

(add-hook 'LaTeX-mode-hook 'enable-evince-sync)

;;(add-to-list 'load-path "/home/srush/libs/emacs-websocket/")
;;(add-to-list 'load-path "/home/srush/libs/emacs-request/")
;;(add-to-list 'load-path "/home/srush/libs/emacs-ipython-notebook/lisp/")
;;(add-to-list 'load-path "/home/srush/libs/auto-complete-1.3.1/")
;;(require 'auto-complete-config)

(setq ein:use-auto-complete t)
(declare-function ein:ac-config "ein-ac")
(when (featurep 'auto-complete)
  (global-auto-complete-mode t)
  (setq ein:use-auto-complete t))

;; Use Tornado 2.4.1 and ipython 1.1

;; (setq ein:use-smartrep t)

;;(require 'auto-complete-config nil t)
;;(declare-function global-auto-complete-mode "auto-complete.el")

;; (ac-config-default)
;;
;; (require 'ein-dev)
;; (setq websocket-debug t)


;; (setq org-mobile-directory "~/Dropbox/MobileOrg")
;; (setq org-directory "~/org")
;; (setq org-mobile-inbox-for-pull "~/org/flagged.org")

;; (add-hook 'python-mode-hook 'jedi:setup)
;; (setq jedi:setup-keys t)                      ; optional
;; (setq jedi:complete-on-dot t)                 ; optional
;; (add-hook 'ein:connect-mode-hook 'ein:jedi-setup)

(require 'auto-complete-config nil t)
(declare-function global-auto-complete-mode "auto-complete.el")
(when (featurep 'auto-complete-config)
  (ac-config-default)
  (global-auto-complete-mode t))


(eval-after-load "tex"
  '(TeX-add-style-hook "beamer" 'my-beamer-mode))

(eval-after-load "tex"
  '(TeX-add-style-hook "todonotes" 'my-thesis-mode))


(setq TeX-region "regionsje")
(defun my-thesis-mode ()
  (define-key LaTeX-mode-map "\C-\M-x" 'tex-section)
  (define-key LaTeX-mode-map "\C-\M-c" 'tex-region
))

(defun my-beamer-mode ()
  "My adds on for when in beamer."

  ;; when in a Beamer file I want to use pdflatex.
  ;; Thanks to Ralf Angeli for this.
  (TeX-PDF-mode 1)                      ;turn on PDF mode.

  ;; Tell reftex to treat \lecture and \frametitle as section commands
  ;; so that C-c = gives you a list of frametitles and you can easily
  ;; navigate around the list of frames.
  ;; If you change reftex-section-level, reftex needs to be reset so that
  ;; reftex-section-regexp is correctly remade.
  (require 'reftex)
  (set (make-local-variable 'reftex-section-levels)
       '(("lecture" . 1) ("section" . 2) ("frametitle" . 3)))
  (reftex-reset-mode)

  ;; add some extra functions.
  (define-key LaTeX-mode-map "\C-cf" 'beamer-template-frame)
  (define-key LaTeX-mode-map "\C-\M-x" 'tex-frame)
)

(defun tex-frame ()
  "Run pdflatex on current frame.
Frame must be declared as an environment."
  (interactive)
  (let (beg)
    (save-excursion
      (search-backward "\\begin{frame}")
      (setq beg (point))
      (forward-char 1)
      (LaTeX-find-matching-end)
      (TeX-pin-region beg (point))
      (letf (( (symbol-function 'TeX-command-query) (lambda (x) "LaTeX")))
        (TeX-command-region))
        )
      ))

(defun tex-section ()
  "Run pdflatex on current section."
  (interactive)
  (LaTeX-mark-section)
  (letf (( (symbol-function 'TeX-command-query) (lambda (x) "LaTeX")))
  (TeX-command-region))
)

(defun tex-section ()
  "Run pdflatex on current section."
  (interactive)
  (LaTeX-mark-section)
  (letf (( (symbol-function 'TeX-command-query) (lambda (x) "LaTeX")))
  (TeX-command-region))
)

(defun tex-region ()
  "Run pdflatex on current region."
  (interactive)
  (letf (( (symbol-function 'TeX-command-query) (lambda (x) "LaTeX")))
  (TeX-command-region))
)


(defun beamer-template-frame ()
  "Create a simple template and move point to after \\frametitle."
  (interactive)
  (LaTeX-environment-menu "frame")
  (insert "\\frametitle{}")
  (backward-char 1))

(setq c-basic-offset 4)


(when (load "flymake" t)
  (defun flymake-pylint-init ()
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
                       'flymake-create-temp-inplace))
           (local-file (file-relative-name
                        temp-file
                        (file-name-directory buffer-file-name))))
      (list "epylint.py" (list local-file))))
  (add-to-list 'flymake-allowed-file-name-masks
               '("\\.py\\'" flymake-pylint-init)))


(add-hook 'find-file-hook 'flymake-find-file-hook)


(defvar flymake-additional-compilation-flags nil)
(put 'flymake-additional-compilation-flags 'safe-local-variable 'listp)

;; no need to arrange Makefile
(defun flymake-cc-init ()
  (let* ((temp-file (flymake-init-create-temp-buffer-copy
                     'flymake-create-temp-inplace))
         (local-file (file-relative-name
                      temp-file
                      (file-name-directory buffer-file-name)))
         (common-args (append (list local-file)
                              flymake-additional-compilation-flags)))
    (if (eq major-mode 'c++-mode)
        (list "cpplint.py" common-args)
      (list "gcc" common-args))))

(loop for ext in '("\\.c$" "\\.h$" "\\.cc$" "\\.cpp$" "\\.hh$")
      do
      (push `(,ext flymake-cc-init) flymake-allowed-file-name-masks))

(add-hook 'c-mode-hook (lambda () (flymake-mode t)))
(add-hook 'c++-mode-hook (lambda () (flymake-mode t)))



;; (setq zsol-default-font
;; "-xos4-terminus-medium-r-normal--12-120-72-72-c-60-iso10646-1")

;; (add-hook 'window-setup-hook 'set-font-and-color)

;; (add-hook 'after-make-frame-functions
;;           (lambda (frame)
;;             (select-frame frame)
;;             (set-font-and-color)))

;; (defun set-font-and-color ()
;;   (if window-system
;;       (progn
;;         (color-theme-arjen)
;;         (set-face-font 'default zsol-default-font))
;;     (color-theme-tty-dark)))

