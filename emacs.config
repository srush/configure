

;; This is a SAMPLE .emacs file
;; Feel free to use this as a base for customizing emacs
(server-start)

(load "~/.emacs.d/haskell-mode-2.4/haskell-site-file")

(setq-default py-indent-offset 2)
(menu-bar-mode 0)

(setq-default indent-tabs-mode nil)

;; Switch to visible bell instead of audio bell
(setq-default visible-bell t)
(setq-default bell-inhibit-time 10)

(show-paren-mode t)
(setq show-paren-style 'mixed)

(tool-bar-mode 0)
(menu-bar-mode 0)
(setq-default case-fold-search t)
(global-set-key "\M-g"  'goto-line)
(global-set-key "\M-c"  'compile)

;; Set ctrl-arrow keys to move words/pages
(global-set-key "\M-[C" 'forward-word)
(global-set-key "\M-[D" 'backward-word)
(global-set-key "\M-[B" 'scroll-up)
(global-set-key "\M-[A" 'scroll-down)

(global-set-key "\M-[5C" 'forward-word)
(global-set-key "\M-[5D" 'backward-word)
(transient-mark-mode 1)
;; Lisp mode for anything that ends in .emacs
(setq auto-mode-alist (append '(("\\.emacs$" . lisp-mode))
                              auto-mode-alist))



;; set up css mode
;;(autoload 'css-mode "css-mode" "Major mode for editing css" t)
(setq auto-mode-alist
      (cons '("\\.css\\'" . css-mode) auto-mode-alist))


(setq auto-mode-alist
      (cons '("\\.cs\\'" . java-mode) auto-mode-alist))

(setq auto-mode-alist
      (cons '("\\.dot\\'" . java-mode) auto-mode-alist))


(setq auto-mode-alist
      (cons '("\\.hs\\'" . haskell-mode) auto-mode-alist))


(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)

(require 'ido)
(ido-mode t)


(load-file "~/.emacs.d/pabbrev.el")
(load-file "~/.emacs.d/json.el")
(load-file "~/.emacs.d/fold.el")
(require 'pabbrev)
(global-pabbrev-mode)


(add-hook 'php-mode-hook 'pabbrev-mode)
;; Substitute the desired version for <version>

(load-file "~/.emacs.d/hs-lint.el")
(require 'hs-lint)


(add-to-list 'load-path "~/.cabal/share/scion-0.1.0.2/emacs")

(require 'scion)

;; if ./cabal/bin is not in your $PATH
(setq scion-program "~/.cabal/bin/scion-server")

(defun my-haskell-hook ()
  ;;Whenever we open a file in Haskell mode, also activate Scion
  
  (local-set-key "\C-cl" 'hs-lint)
  (scion-mode 1)
  ;; Whenever a file is saved, immediately type check it and
  ;; highlight errors/warnings in the source.
  (scion-flycheck-on-save 1))



(add-hook 'haskell-mode-hook 'my-haskell-hook)

;; Use ido-mode completion (matches anywhere, not just beginning)
;;
;; WARNING: This causes some versions of Emacs to fail so badly
;; that Emacs needs to be restarted.


(setq scion-completing-read-function 'ido-completing-read)
(add-hook 'py-mode-hook 'pabbrev-mode)

(add-hook 'c-mode-hook 'pabbrev-mode)
(add-hook 'haskell-mode-hook 'pabbrev-mode)
(add-hook 'c++-mode-hook 'pabbrev-mode)
(add-hook 'javascript-mode-hook 'pabbrev-mode)




;;(require 'template)
;;(template-initialize)
;;(global-set-key "\M-t" 'template-expand-template)

(put 'downcase-region 'disabled nil)
;;(add-hook 'magit-log-edit-mode 'template-expand-template)




(global-set-key "\M-t" 'add-commit-template)


;;  (load "folding" 'nomessage 'noerror)
;;  (folding-mode-add-find-file-hook)
;;  
;;  (folding-add-to-marks-list 'haskell-mode  "--{"  "--}"  nil t)

(add-hook 'haskell-mode-hook 'fold-mode)

(global-set-key "\C-co" 'fold-show-all )
(global-set-key "\C-cu" 'fold-whole-buffer )
(global-set-key "\C-cy" 'fold-show )
(global-set-key "\C-ct" 'fold-region )

(set-buffer-file-coding-system 'unix)

(define-key global-map "\C-h" 'backward-delete-char)

(define-key global-map "\M-n" 'scroll-up)
(define-key global-map "\M-p" 'scroll-down)

(defun delete-word (arg)
  "Delete characters forward until encountering the end of a word.
With argument, do this that many times."
  (interactive "p")
  (delete-region (point) (progn (forward-word arg) (point))))

(defun backward-delete-word (arg)
  "Delete characters backward until encountering the end of a word.
With argument, do this that many times."
  (interactive "p")
  (delete-word (- arg)))

(define-key global-map "\M-h" 'backward-delete-word)
(define-key global-map "\M-d" 'delete-word)
