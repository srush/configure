

;; This is a SAMPLE .emacs file
;; Feel free to use this as a base for customizing emacs
(server-start)

(load "~/.emacs.d/haskell-mode-2.4/haskell-site-file")

(setq-default py-indent-offset 2)
(menu-bar-mode 0)

(setq-default indent-tabs-mode nil)

;; Switch to visible bell instead of audio bell
(setq-default visible-bell t)
(setq-default bell-inhibit-time 10)

(show-paren-mode t)
(setq show-paren-style 'mixed)

(tool-bar-mode 0)
(menu-bar-mode 0)
(setq-default case-fold-search t)
(global-set-key "\M-g"  'goto-line)
(global-set-key "\M-c"  'compile)

;; Set ctrl-arrow keys to move words/pages
(global-set-key "\M-[C" 'forward-word)
(global-set-key "\M-[D" 'backward-word)
(global-set-key "\M-[B" 'scroll-up)
(global-set-key "\M-[A" 'scroll-down)

(global-set-key "\M-[5C" 'forward-word)
(global-set-key "\M-[5D" 'backward-word)
(transient-mark-mode 1)
;; Lisp mode for anything that ends in .emacs
(setq auto-mode-alist (append '(("\\.emacs$" . lisp-mode))
                              auto-mode-alist))



;; set up css mode
;;(autoload 'css-mode "css-mode" "Major mode for editing css" t)
(setq auto-mode-alist
      (cons '("\\.css\\'" . css-mode) auto-mode-alist))


(setq auto-mode-alist
      (cons '("\\.cs\\'" . java-mode) auto-mode-alist))

(setq auto-mode-alist
      (cons '("\\.dot\\'" . java-mode) auto-mode-alist))


(setq auto-mode-alist
      (cons '("\\.hs\\'" . haskell-mode) auto-mode-alist))


(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)

(require 'ido)
(ido-mode t)


(load-file "~/.emacs.d/pabbrev.el")
(load-file "~/.emacs.d/json.el")
(load-file "~/.emacs.d/fold.el")
(require 'pabbrev)
(global-pabbrev-mode)


(add-hook 'php-mode-hook 'pabbrev-mode)
;; Substitute the desired version for <version>

(load-file "~/.emacs.d/hs-lint.el")
(require 'hs-lint)


(add-to-list 'load-path "~/.cabal/share/scion-0.1.0.2/emacs")

(require 'scion)

;; if ./cabal/bin is not in your $PATH
(setq scion-program "~/.cabal/bin/scion-server")

(defun my-haskell-hook ()
  ;;Whenever we open a file in Haskell mode, also activate Scion
  
  (local-set-key "\C-cl" 'hs-lint)
  (scion-mode 1)
  ;; Whenever a file is saved, immediately type check it and
  ;; highlight errors/warnings in the source.
  (scion-flycheck-on-save 1))



(add-hook 'haskell-mode-hook 'my-haskell-hook)

;; Use ido-mode completion (matches anywhere, not just beginning)
;;
;; WARNING: This causes some versions of Emacs to fail so badly
;; that Emacs needs to be restarted.


(setq scion-completing-read-function 'ido-completing-read)
(add-hook 'py-mode-hook 'pabbrev-mode)

(add-hook 'c-mode-hook 'pabbrev-mode)
(add-hook 'haskell-mode-hook 'pabbrev-mode)
(add-hook 'c++-mode-hook 'pabbrev-mode)
(add-hook 'javascript-mode-hook 'pabbrev-mode)




;;(require 'template)
;;(template-initialize)
;;(global-set-key "\M-t" 'template-expand-template)

(put 'downcase-region 'disabled nil)
;;(add-hook 'magit-log-edit-mode 'template-expand-template)




(global-set-key "\M-t" 'add-commit-template)


;;  (load "folding" 'nomessage 'noerror)
;;  (folding-mode-add-find-file-hook)
;;  
;;  (folding-add-to-marks-list 'haskell-mode  "--{"  "--}"  nil t)

(add-hook 'haskell-mode-hook 'fold-mode)

(global-set-key "\C-co" 'fold-show-all )
(global-set-key "\C-cu" 'fold-whole-buffer )
(global-set-key "\C-cy" 'fold-show )
(global-set-key "\C-ct" 'fold-region )

(set-buffer-file-coding-system 'unix)


(defun my-revert-buffer()
"revert buffer without asking for confirmation"
(interactive "") 
(revert-buffer t t)
)
(global-set-key "\C-cr" 'revert-buffer )

(define-key global-map "\C-n" 'scroll-up)
(define-key global-map "\C-p" 'scroll-down)

(defun delete-word (arg)
  "Delete characters forward until encountering the end of a word.
With argument, do this that many times."
  (interactive "p")
  (delete-region (point) (progn (forward-word arg) (point))))

(defun backward-delete-word (arg)
  "Delete characters backward until encountering the end of a word.
With argument, do this that many times."
  (interactive "p")
  (delete-word (- arg)))

(define-key global-map "\M-h" 'backward-delete-word)
(define-key global-map "\M-l" 'delete-word)
(define-key global-map "\C-h" 'backward-delete-char)

(global-set-key "\C-k" 'previous-line)
(define-key global-map "\C-j" 'next-line)
(define-key global-map "\C-l" 'kill-line)

(define-key global-map "\C-f" 'forward-char)
(define-key global-map "\C-d" 'backward-char)
(define-key global-map "\M-d" 'backward-word)



;; Literate Haskell 


;;            ;; Haskell [requires MMM]
(load "~/.emacs.d/mmm-haskell.el")
(require 'mmm-auto)


 (mmm-add-classes
   '((literate-haskell
      :classes (literate-haskell-bird
                literate-haskell-laTeX
                )
      )
     (literate-haskell-bird
      :submode literate-haskell-mode
      :front "^>"
      :include-front t
      :back "^[^>]\\|\\'"
      :include-back nil
      :insert ((?b insert-literate-haskell-bird-region
                   nil
                   @ ">" @ " " _ @ "\n" @ "\n"))
      )
     (literate-haskell-laTeX
      :submode haskell-mode
      :front "^\\\\begin{code}\n"
      :include-front nil
      :back "^\\\\end{code}"
      :include-back nil
      :insert ((?l insert-literate-haskell-laTeX-region
                   nil
                   @ "\\begin{code}\n" @ _ @ "\\end{code}" @ "\n"))
      )
     (literate-haskell-lhs2TeX
      :classes (literate-haskell-lhs2TeX-code
                literate-haskell-lhs2TeX-bird-code
                literate-haskell-lhs2TeX-bird-spec
                ; The following two modes cause mmm-parse-buffer to go
                ; into a loop for || and @@.
                ; literate-haskell-lhs2TeX-verb
                ; literate-haskell-lhs2TeX-inline
                )
      )
     (literate-haskell-lhs2TeX-code
      :submode haskell-mode
      :front "^\\\\begin{code}\\|^\\\\begin{spec}"
      :front-offset (end-of-line 1)
      :back "^\\\\end{code}\\|^\\\\end{spec}"
      :back-offset (beginning-of-line -1)
      )
     (literate-haskell-lhs2TeX-bird-code
      :submode literate-haskell-mode
      :front "^> "
      :include-front true
      :back "^[^>]"
      :back-offset (beginning-of-line -1)
      )
  ; literate-haskell-mode doesn't understand <...
  ; mmm-mode doesn't handle :back "$" :back-offset 0 very well. The
  ; keyboard bindings of the two modes aren't handled correctly.
     (literate-haskell-lhs2TeX-bird-spec
      :submode haskell-mode
      :front "^< "
      :back "^[^>]"
      :back-offset -1
      )
     (literate-haskell-lhs2TeX-verb
      :submode haskell-mode
      :front "@"
      :back "@"
      :back-offset -1
      )
     (literate-haskell-lhs2TeX-inline
      :submode haskell-mode
      :front "|"
      :back "|"
      :back-offset -1
      )
     )
   )

  (dolist (entry '((flyspell-prog-text-faces region)
                   (flyspell-generic-check-word-p region)
                   (haskell-literate region (haskell literate-haskell))
                   ))
    (add-to-list 'mmm-save-local-variables entry))


   '(mmm-global-mode (quote maybe) nil (mmm-mode))
   '(mmm-mode-ext-classes-alist (quote ((latex-mode "\\.lhs$" 
literate-haskell-lhs2TeX) (text-mode "\\.lhs$" literate-haskell))) nil 
(mmm-mode))
   '(mmm-submode-decoration-level 2)


(defvar my-keys-minor-mode-map (make-keymap) "my-keys-minor-mode keymap.")

(define-key my-keys-minor-mode-map (kbd "C-j") 'next-line)

(define-minor-mode my-keys-minor-mode
  "A minor mode so that my key settings override annoying major modes."
  t " my-keys" 'my-keys-minor-mode-map)

(my-keys-minor-mode 1)